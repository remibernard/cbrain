
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# NOTE: This is a working template generated from a descriptor:
# [Schema]         <%= schema['id'] %>
# [Schema version] <%= descriptor['schema-version'] %>
# [Tool]           <%= descriptor['name'] %>
# [Version]        <%= descriptor['tool-version'] || '?' %>
# See the CbrainTask Programmer Guide (CBRAIN Wiki) for a more complete picture
# of how CbrainTasks are constructed.
% # NOTE: This template's weird indentation is there to try and make the
% # generated code as legible as possible.

# Portal-side CbrainTask subclass to launch <%= name %>
class CbrainTask::<%= name %> < PortalTask

  Revision_info=CbrainFileRevision[__FILE__] #:nodoc:

% # Maximum width of a given +key+'s value in a +list+ of hashes
% max_width = lambda do |list, key|
%   list.map { |i| i[key].to_s.length rescue 0 }.max
% end
%
% # Parameter groups
% params     = descriptor['inputs'].dup
% outputs    = descriptor['output-files'].dup
% required   = params.select { |i| ! i['optional']     }
% optional   = params.select { |i| i['optional']       }
% defaults   = params.select { |i| i['default-value']  }
% files      = params.select { |i| i['type'] == 'File' }
% file_lists = files.select  { |i| i['list']           }
%
% # Special case; we only have one file input parameter and it only
% # allows single files.
% single_file  = files.first if files.count == 1 && file_lists.empty?
% if single_file
%   # The parameter's validation is made in final_task_list and is no longer
%   # optional if it was.
%   params.delete(single_file)
%   required.delete(single_file)
%   optional.delete(single_file)
% end
%
% unless defaults.empty?
  # Default values for some (all?) of <%= name %>'s parameters. Those values
  # reflect the defaults taken by the tool's developer; feel free to change
  # them to match your platform's requirements.
  def self.default_launch_args #:nodoc:
    {
%   id_width = max_width.(defaults, 'id') + "'".length
%   defaults.each do |default|
      <%=
        ":'%-#{id_width}s => %s," % [
          default['id'] + "'",
          default['default-value'].inspect
        ]
      %>
%   end
    }
  end

% end
  # Callback called just before the task's form is rendered. At this point,
  # the task's params hash contains at least the default list of input
  # userfiles under the key :interface_userfile_ids. 
  def before_form #:nodoc:
% file_types = descriptor['inputs']
%   .select { |i| ! i['optional'] && i['type'] == 'File' }
%   .map    { |i| i['cbrain-file-type'] }
%   .uniq
% unless file_types.empty?
    # Resolve interface_userfile_ids to actual userfile objects
    files = Userfile.find_all_by_id(self.params[:interface_userfile_ids])

%   if file_types.length == 1 && !file_types.first
    # At least one file is required.
    cb_error "Error: this task requires at least one input file" if files.empty?
%   else
    # Some input files are not optional and specific file types are
    # required. Make sure the given input files are adequate.

    # Ensure that +files+ contains at least one file of type +type+
    ensure_one = lambda do |files, type|
      type = type.constantize unless type.is_a?(Class)
      cb_error "Error: this task requires at least one file of type '#{type.name}'" unless
        files.any? { |f| f.is_a?(type) }
    end

%     file_types.compact.each do |type|
    ensure_one.(files, '<%= type %>')
%     end
%   end

% end
    ""
  end

  # Callback called just after the task's form has been submitted by the user.
  # At this point, all the task's params will be filled. This is where most
  # validations happens.
  def after_form #:nodoc:
% unless params.empty?
    params = self.params

%   unless file_lists.empty?
    # Assign the default input file list from interface_userfile_ids to unset
    # file list parameters.
    [
%     file_lists.each do |param|
      :'<%= param['id'] %>',
%     end
    ].each do |list|
      params[list] = params[:interface_userfile_ids].dup unless
        params[list].is_a?(Enumerable) # Allows explicitly empty lists
    end

%   end
    # Sanitize every input parameter according to their expected type

%   sanitize_param = format_call('sanitize_param', params) { |param| [
%     ":'#{param['id']}'",
%     ":#{param['type'].downcase}",
%     (param['cbrain-file-type'] ? ":file_type => '#{param['cbrain-file-type']}'" : nil)
%   ] }
%
%   unless required.empty?
    # Required parameters
%     required.each do |param|
    <%= sanitize_param.(param) %>
%     end

%   end
%   unless optional.empty?
    # Optional parameters
%     calls      = optional.map { |param| [ sanitize_param.(param), param ] }
%     call_width = calls.map { |c, p| c.length }.max
%     calls.each do |call, param|
    <%= "%-#{call_width}s unless params[:'%s'].nil?" % [ call, param['id'] ] %>
%     end

%   end
% end
    ""
  end

  # Final set of tasks to be launched based on this task's parameters. Only
  # useful if the parameters set for this task represent a set of tasks
  # instead of just one.
  def final_task_list #:nodoc:
% if single_file
    # Create a list of tasks out of the default input file list
    # (interface_userfile_ids), each file going into parameter '<%= single_file['id'] %>'
    self.params[:interface_userfile_ids].map do |id|
      task = self.dup

      # Set and sanitize the one file parameter for each id
      task.params[:'<%= single_file['id']%>'] = id
%   if single_file['cbrain-file-type']
      task.sanitize_param(:'<%= single_file['id'] %>', :file, :file_type => '<%= single_file['cbrain-file-type']%>')
%   else
      task.sanitize_param(:'<%= single_file['id'] %>', :file)
%   end

      task.description ||= ''
      task.description  += " <%= single_file['id']%>: #{Userfile.find(id).name}"
      task.description.strip!
      task
    end
% else
    [ self ]
% end
  end

  # Task parameters to leave untouched by the edit task mechanism. Usually
  # for parameters added in after_form or final_task_list, as those wouldn't
  # be present on the form and thus lost when the task is edited.
  def untouchable_params_attributes #:nodoc:
% if outputs.empty?
    { }
% else
    # Output parameters will be present after the task has run and need to be
    # preserved.
    {
%   id_width = max_width.(outputs, 'id') + "'".length
%   outputs.each do |output|
      <%= ":'%-#{id_width}s => true," % (output['id'] + "'") %>
%   end
    }
% end
  end

  # Generic helper methods

  # Ensure that the parameter +name+ is not null and matches a generic tool
  # parameter +type+ (:file, :numeric, :string or :flag) before converting the
  # parameter's value to the corresponding Ruby type (if appropriate).
  # For example, sanitize_param(:deviation, :numeric) would validate that
  # self.params[:deviation] is a number and then convert it to a Ruby Float or
  # Integer.
  #
  # Available +options+:
  # [file_type] Userfile type to validate a parameter of +type+ :file against.
  #
  # If the parameter's value is an array, every value in the array is checked
  # and expected to match +type+.
  #
  # Raises an exception for task parameter +name+ if the parameter's value
  # is not adequate.
  def sanitize_param(name, type, options = {})
    # Taken userfile names. An error will be raised if two input files have the
    # same name.
    @taken_files ||= Set.new

    # Fetch the parameter and convert to an Enumerable if required
    values = self.params[name] rescue nil
    values = [values] unless values.is_a?(Enumerable)

    # Validate and convert each value
    values.map! do |value|
      case type
      # Try to convert to integer and then float. Cant? then its not a number.
      when :number
        if (number = Integer(value) rescue Float(value) rescue nil)
          value = number
        elsif value.blank?
          params_errors.add(name, ": value missing")
        else
          params_errors.add(name, ": not a number (#{value})")
        end

      # Nothing special required for strings, bar for symbols being acceptable strings.
      when :string
        value = value.to_s if value.is_a?(Symbol)
        params_errors.add(name, " not a string (#{value})") unless value.is_a?(String)

      # Try to match against various common representation of true and false
      when :flag
        if value.is_a?(String)
          value = true  if value =~ /^(true|t|yes|y|on|1)$/i
          value = false if value =~ /^(false|f|no|n|off|0|)$/i
        end

        if ! [ true, false ].include?(value)
          params_errors.add(name, ": not true or false (#{value})")
        end

      # Make sure the file ID is valid, accessible, not already used and
      # of the correct type.
      when :file
        unless (id = Integer(value) rescue nil)
          params_errors.add(name, ": invalid or missing userfile (ID #{value})")
          next value
        end

        unless (file = Userfile.find_accessible_by_user(value, self.user))
          params_errors.add(name, ": cannot find userfile (ID #{value})")
          next value
        end

        if @taken_files.include?(file.name)
          params_errors.add(name, ": file name already in use (#{file.name})")
        else
          @taken_files.add(file.name)
        end

        if type = options[:file_type]
          type = type.constantize unless type.is_a?(Class)
          params_errors.add(name, ": incorrect userfile type (#{file.name})") if
            type && ! file.is_a?(type)
        end
      end

      value
    end

    # Store the value back
    self.params[name] = values.first unless self.params[name].is_a?(Enumerable)
  end

end
